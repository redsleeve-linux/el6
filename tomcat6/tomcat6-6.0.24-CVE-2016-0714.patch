--- java/org/apache/catalina/ha/session/mbeans-descriptors.xml.orig	2016-08-02 13:48:37.531862484 -0400
+++ java/org/apache/catalina/ha/session/mbeans-descriptors.xml	2016-08-02 13:50:33.818228450 -0400
@@ -295,6 +295,14 @@
       name="sendAllSessionsWaitTime"
       description="wait time between send session block (default 2 sec)"
       type="int"/>
+    <attribute
+      name="sessionAttributeValueClassNameFilter"
+      description="The regular expression used to filter session attributes based on the implementation class of the value. The regular expression is anchored and must match the fully qualified class name."
+      type="java.lang.String"/>
+    <attribute
+      name="warnOnSessionAttributeFilterFailure"
+      description="Should a WARN level log message be generated if a session attribute fails to match sessionAttributeNameFilter or sessionAttributeClassNameFilter?"
+      type="boolean"/>      
     <operation
       name="listSessionIds"
       description="Return the list of active session ids"
@@ -542,6 +550,14 @@
       description="mapSendOptions"
       type="int"
       writeable="false"/>
+    <attribute
+      name="sessionAttributeValueClassNameFilter"
+      description="The regular expression used to filter session attributes based on the implementation class of the value. The regular expression is anchored and must match the fully qualified class name."
+      type="java.lang.String"/>
+    <attribute
+      name="warnOnSessionAttributeFilterFailure"
+      description="Should a WARN level log message be generated if a session attribute fails to match sessionAttributeNameFilter or sessionAttributeClassNameFilter?"
+      type="boolean"/>      
     <operation
       name="listSessionIds"
       description="Return the list of active primary session ids"
--- java/org/apache/catalina/session/LocalStrings.properties.orig	2016-08-02 13:48:37.534862494 -0400
+++ java/org/apache/catalina/session/LocalStrings.properties	2016-08-02 13:51:13.275351223 -0400
@@ -36,6 +36,8 @@
 managerBase.gotten=Completed getting message digest component
 managerBase.random=Exception initializing random number generator of class {0}
 managerBase.seeding=Seeding random number generator class {0}
+managerBase.sessionAttributeNameFilter=Skipped session attribute named [{0}] because it did not match the name filter [{1}]
+managerBase.sessionAttributeValueClassNameFilter=Skipped session attribute named [{0}] because the value type [{1}] did not match the filter [{2}]
 serverSession.value.iae=null value
 standardManager.alreadyStarted=Manager has already been started
 standardManager.createSession.ise=createSession: Too many active sessions
--- java/org/apache/catalina/session/ManagerBase.java.orig	2016-08-02 13:48:37.536862500 -0400
+++ java/org/apache/catalina/session/ManagerBase.java	2016-08-02 15:37:36.678876918 -0400
@@ -41,6 +41,8 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.regex.Pattern;
+import java.util.regex.PatternSyntaxException;
 
 import javax.management.MBeanRegistration;
 import javax.management.MBeanServer;
@@ -246,6 +248,10 @@
      */
     protected PropertyChangeSupport support = new PropertyChangeSupport(this);
     
+    private Pattern sessionAttributeValueClassNamePattern;
+
+    private boolean warnOnSessionAttributeFilterFailure;
+    
     // ------------------------------------------------------------- Security classes
 
 
@@ -264,10 +270,102 @@
         }
     }
 
+    // ------------------------------------------------------------ Constructors
+ 
+    public ManagerBase() {
+        if (Globals.IS_SECURITY_ENABLED) {
+            // Minimum set required for default distribution/persistence to work
+            // plus String
+            setSessionAttributeValueClassNameFilter(
+                    "java\\.lang\\.(?:Boolean|Integer|Long|Number|String)");
+            setWarnOnSessionAttributeFilterFailure(true);
+        }
+    }
 
     // ------------------------------------------------------------- Properties
 
     /**
+     * Obtain the regular expression used to filter session attribute based on
+     * the implementation class of the value. The regular expression is anchored
+     * and must match the fully qualified class name.
+     *
+     * @return The regular expression currently used to filter class names.
+     *         {@code null} means no filter is applied. If an empty string is
+     *         specified then no names will match the filter and all attributes
+     *         will be blocked.
+     */
+    public String getSessionAttributeValueClassNameFilter() {
+        if (sessionAttributeValueClassNamePattern == null) {
+            return null;
+        }
+        return sessionAttributeValueClassNamePattern.toString();
+    }
+
+
+    /**
+     * Provides {@link #getSessionAttributeValueClassNameFilter()} as a
+     * pre-compiled regular expression pattern.
+     *
+     * @return The pre-compiled pattern used to filter session attributes based
+     *         on the implementation class name of the value. {@code null} means
+     *         no filter is applied.
+     */
+    protected Pattern getSessionAttributeValueClassNamePattern() {
+        return sessionAttributeValueClassNamePattern;
+    }
+
+
+    /**
+     * Set the regular expression to use to filter classes used for session
+     * attributes. The regular expression is anchored and must match the fully
+     * qualified class name.
+     *
+     * @param sessionAttributeValueClassNameFilter The regular expression to use
+     *            to filter session attributes based on class name. Use {@code
+     *            null} if no filtering is required. If an empty string is
+     *           specified then no names will match the filter and all
+     *           attributes will be blocked.
+     *
+     * @throws PatternSyntaxException If the expression is not valid
+     */
+    public void setSessionAttributeValueClassNameFilter(String sessionAttributeValueClassNameFilter)
+            throws PatternSyntaxException {
+        if (sessionAttributeValueClassNameFilter == null ||
+                sessionAttributeValueClassNameFilter.length() == 0) {
+            sessionAttributeValueClassNamePattern = null;
+        } else {
+            sessionAttributeValueClassNamePattern =
+                    Pattern.compile(sessionAttributeValueClassNameFilter);
+        }
+    }
+
+
+    /**
+     * Should a warn level log message be generated if a session attribute is
+     * not persisted / replicated / restored.
+     *
+     * @return {@code true} if a warn level log message should be generated
+     */
+    public boolean getWarnOnSessionAttributeFilterFailure() {
+        return warnOnSessionAttributeFilterFailure;
+    }
+
+
+    /**
+     * Configure whether or not a warn level log message should be generated if
+     * a session attribute is not persisted / replicated / restored.
+     *
+     * @param warnOnSessionAttributeFilterFailure {@code true} if the
+     *            warn level message should be generated
+     *
+     */
+    public void setWarnOnSessionAttributeFilterFailure(
+            boolean warnOnSessionAttributeFilterFailure) {
+        this.warnOnSessionAttributeFilterFailure = warnOnSessionAttributeFilterFailure;
+    }
+
+
+    /**
      * Return the message digest algorithm for this Manager.
      */
     public String getAlgorithm() {
--- java/org/apache/catalina/session/mbeans-descriptors.xml.orig	2016-08-02 13:48:37.538862507 -0400
+++ java/org/apache/catalina/session/mbeans-descriptors.xml	2016-08-02 13:59:04.799818385 -0400
@@ -115,6 +115,14 @@
           description="Number of duplicated session ids generated"
                  type="int" />
 
+    <attribute   name="sessionAttributeValueClassNameFilter"
+          description="The regular expression used to filter session attributes based on the implementation class of the value. The regular expression is anchored and must match the fully qualified class name."
+                 type="java.lang.String"/>
+
+    <attribute   name="warnOnSessionAttributeFilterFailure"
+          description="Should a WARN level log message be generated if a session attribute fails to match sessionAttributeNameFilter or sessionAttributeClassNameFilter?"
+                 type="boolean"/>
+
     <operation   name="listSessionIds"
           description="Return the list of active session ids"
                impact="ACTION"
@@ -289,6 +297,14 @@
           description="Number of duplicated session ids generated"
                  type="int" />
 
+    <attribute   name="sessionAttributeValueClassNameFilter"
+          description="The regular expression used to filter session attributes based on the implementation class of the value. The regular expression is anchored and must match the fully qualified class name."
+                 type="java.lang.String"/>
+
+    <attribute   name="warnOnSessionAttributeFilterFailure"
+          description="Should a WARN level log message be generated if a session attribute fails to match sessionAttributeNameFilter or sessionAttributeClassNameFilter?"
+                 type="boolean"/>
+
     <operation   name="listSessionIds"
           description="Return the list of active session ids"
                impact="ACTION"
--- webapps/docs/changelog.xml.orig	2016-08-02 13:48:37.540862513 -0400
+++ webapps/docs/changelog.xml	2016-08-02 15:30:19.866556693 -0400
@@ -46,6 +46,14 @@
 <section name="Tomcat 6.0.24-97 (csutherl)">
   <subsection name="Catalina">
     <changelog>
+      <add>
+        Extend the session attribute filtering options to include filtering
+        based on the implementation class of the value and optional
+        <code>WARN</code> level logging if an attribute is filtered. These
+        options are available for all of the Manager implementations that ship
+        with Tomcat. When a <code>SecurityManager</code> is used filtering will
+        be enabled by default. (markt)
+      </add>    
       <fix>
         Add the <code>StatusManagerServlet</code> to the list of Servlets that
         can only be loaded by privileged applications. (markt)
--- webapps/docs/config/cluster-manager.xml.orig	2016-08-02 13:48:37.543862522 -0400
+++ webapps/docs/config/cluster-manager.xml	2016-08-02 15:11:55.153196988 -0400
@@ -102,6 +102,26 @@
        when a node is starting up.
        Default value is <code>60</code> seconds.
      </attribute>
+      <attribute name="sessionAttributeValueClassNameFilter" required="false">
+        <p>A regular expression used to filter which session attributes will be
+        replicated. An attribute will only be replicated if the implementation
+        class name of the value matches this pattern. If the pattern is zero
+        length or <code>null</code>, all attributes are eligible for
+        replication. The pattern is anchored so the fully qualified class name
+        must fully match the pattern. If not specified, the default value of
+        <code>null</code> will be used unless a <code>SecurityManager</code> is
+        enabled in which case the default will be
+        <code>java\\.lang\\.(?:Boolean|Integer|Long|Number|String)</code>.</p>        
+      </attribute>
+      <attribute name="warnOnSessionAttributeFilterFailure" required="false">
+        <p>If <strong>sessionAttributeNameFilter</strong> or
+        <strong>sessionAttributeValueClassNameFilter</strong> blocks an
+        attribute, should this be logged at <code>WARN</code> level? If
+        <code>WARN</code> level logging is disabled then it will be logged at
+        <code>DEBUG</code>. The default value of this attribute is
+        <code>false</code> unless a <code>SecurityManager</code> is enabled in
+        which case the default will be <code>true</code>.</p>
+      </attribute>
     </attributes>
   </subsection>
   <subsection name="org.apache.catalina.ha.session.BackupManager Attributes">
@@ -110,6 +130,26 @@
        The backup manager uses a replicated map, this map is sending and receiving messages.
        You can setup the flag for how this map is sending messages, the default value is <code>6</code>(asynchronous).
      </attribute>
+     <attribute name="sessionAttributeValueClassNameFilter" required="false">
+       <p>A regular expression used to filter which session attributes will be
+       replicated. An attribute will only be replicated if the implementation
+       class name of the value matches this pattern. If the pattern is zero
+       length or <code>null</code>, all attributes are eligible for
+       replication. The pattern is anchored so the fully qualified class name
+       must fully match the pattern. If not specified, the default value of
+       <code>null</code> will be used unless a <code>SecurityManager</code> is
+       enabled in which case the default will be
+       <code>java\\.lang\\.(?:Boolean|Integer|Long|Number|String)</code>.</p>
+     </attribute>
+     <attribute name="warnOnSessionAttributeFilterFailure" required="false">
+       <p>If <strong>sessionAttributeNameFilter</strong> or
+       <strong>sessionAttributeValueClassNameFilter</strong> blocks an
+       attribute, should this be logged at <code>WARN</code> level? If
+       <code>WARN</code> level logging is disabled then it will be logged at
+       <code>DEBUG</code>. The default value of this attribute is
+       <code>false</code> unless a <code>SecurityManager</code> is enabled in
+       which case the default will be <code>true</code>.</p>
+     </attribute>     
     </attributes>
   </subsection>
 </section>
--- webapps/docs/config/manager.xml.orig	2016-08-02 13:48:37.544862525 -0400
+++ webapps/docs/config/manager.xml	2016-08-02 15:12:59.204391782 -0400
@@ -157,6 +157,28 @@
         The default is 16.</p>
       </attribute>
 
+      <attribute name="sessionAttributeValueClassNameFilter" required="false">
+        <p>A regular expression used to filter which session attributes will be
+        distributed. An attribute will only be distributed if the implementation
+        class name of the value matches this pattern. If the pattern is zero
+        length or <code>null</code>, all attributes are eligible for
+        distribution. The pattern is anchored so the fully qualified class name
+        must fully match the pattern. If not specified, the default value of
+        <code>null</code> will be used unless a <code>SecurityManager</code> is
+        enabled in which case the default will be
+        <code>java\\.lang\\.(?:Boolean|Integer|Long|Number|String)</code>.</p>
+      </attribute>
+
+      <attribute name="warnOnSessionAttributeFilterFailure" required="false">
+        <p>If <strong>sessionAttributeNameFilter</strong> or
+        <strong>sessionAttributeValueClassNameFilter</strong> blocks an
+        attribute, should this be logged at <code>WARN</code> level? If
+        <code>WARN</code> level logging is disabled then it will be logged at
+        <code>DEBUG</code>. The default value of this attribute is
+        <code>false</code> unless a <code>SecurityManager</code> is enabled in
+        which case the default will be <code>true</code>.</p>
+       </attribute>
+
     </attributes>
 
     <h3>Persistent Manager Implementation</h3>
@@ -270,6 +292,28 @@
         The default is 16.</p>
       </attribute>
 
+      <attribute name="sessionAttributeValueClassNameFilter" required="false">
+        <p>A regular expression used to filter which session attributes will be
+        distributed. An attribute will only be distributed if the implementation
+        class name of the value matches this pattern. If the pattern is zero
+        length or <code>null</code>, all attributes are eligible for
+        distribution. The pattern is anchored so the fully qualified class name
+        must fully match the pattern. If not specified, the default value of
+        <code>null</code> will be used unless a <code>SecurityManager</code> is
+        enabled in which case the default will be
+        <code>java\\.lang\\.(?:Boolean|Integer|Long|Number|String)</code>.</p>
+      </attribute>
+
+      <attribute name="warnOnSessionAttributeFilterFailure" required="false">
+        <p>If <strong>sessionAttributeNameFilter</strong> or
+        <strong>sessionAttributeValueClassNameFilter</strong> blocks an
+        attribute, should this be logged at <code>WARN</code> level? If
+        <code>WARN</code> level logging is disabled then it will be logged at
+        <code>DEBUG</code>. The default value of this attribute is
+        <code>false</code> unless a <code>SecurityManager</code> is enabled in
+        which case the default will be <code>true</code>.</p>
+       </attribute>
+
     </attributes>
 
     <p>In order to successfully use a PersistentManager, you must nest inside
--- java/org/apache/catalina/session/StandardManager.java.orig	2016-08-02 13:48:37.546862532 -0400
+++ java/org/apache/catalina/session/StandardManager.java	2016-08-02 15:34:22.269292038 -0400
@@ -46,7 +46,9 @@
 import org.apache.catalina.util.CustomObjectInputStream;
 import org.apache.catalina.util.LifecycleSupport;
 
+import org.apache.juli.logging.Log;
 import org.apache.catalina.security.SecurityUtil;
+
 /**
  * Standard implementation of the <b>Manager</b> interface that provides
  * simple session persistence across restarts of this component (such as
@@ -349,17 +351,21 @@
         ObjectInputStream ois = null;
         Loader loader = null;
         ClassLoader classLoader = null;
+        Log logger = null;
         try {
             fis = new FileInputStream(file.getAbsolutePath());
             BufferedInputStream bis = new BufferedInputStream(fis);
             if (container != null)
                 loader = container.getLoader();
+                logger = container.getLogger();
             if (loader != null)
                 classLoader = loader.getClassLoader();
             if (classLoader != null) {
                 if (log.isDebugEnabled())
                     log.debug("Creating custom object input stream for class loader ");
-                ois = new CustomObjectInputStream(bis, classLoader);
+	            ois = new CustomObjectInputStream(bis, classLoader, logger,
+                    getSessionAttributeValueClassNamePattern(),
+                    getWarnOnSessionAttributeFilterFailure());                
             } else {
                 if (log.isDebugEnabled())
                     log.debug("Creating standard object input stream");
--- java/org/apache/catalina/util/CustomObjectInputStream.java.orig	2016-08-02 13:48:37.549862541 -0400
+++ java/org/apache/catalina/util/CustomObjectInputStream.java	2016-08-02 15:32:31.852958097 -0400
@@ -19,9 +19,17 @@
 
 import java.io.InputStream;
 import java.io.IOException;
+import java.io.InvalidClassException;
 import java.io.ObjectInputStream;
 import java.io.ObjectStreamClass;
 import java.lang.reflect.Proxy;
+import java.util.Map;
+import java.util.WeakHashMap;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.regex.Pattern;
+
+import org.apache.juli.logging.Log;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  * Custom subclass of <code>ObjectInputStream</code> that loads from the
@@ -36,15 +44,27 @@
 public final class CustomObjectInputStream
     extends ObjectInputStream {
 
+    private static final StringManager sm = StringManager.getManager(
+            CustomObjectInputStream.class.getPackage().getName());
+
+    private static final WeakHashMap<ClassLoader, Map<String,Boolean>> reportedClassCache =
+            new WeakHashMap<ClassLoader, Map<String,Boolean>>();
 
     /**
      * The class loader we will use to resolve classes.
      */
     private ClassLoader classLoader = null;
+    private final Map<String,Boolean> reportedClasses;
+    private final Log log;
+
+    private final Pattern allowedClassNamePattern;
+    private final String allowedClassNameFilter;
+    private final boolean warnOnFailure;
 
 
     /**
-     * Construct a new instance of CustomObjectInputStream
+     * Construct a new instance of CustomObjectInputStream without any filtering
+     * of deserialized classes.
      *
      * @param stream The input stream we will read from
      * @param classLoader The class loader used to instantiate objects
@@ -54,9 +74,54 @@
     public CustomObjectInputStream(InputStream stream,
                                    ClassLoader classLoader)
         throws IOException {
+        this(stream, classLoader, null, null, false);
+    }
 
+
+    /**
+     * Construct a new instance of CustomObjectInputStream with filtering of
+     * deserialized classes.
+     *
+     * @param stream The input stream we will read from
+     * @param classLoader The class loader used to instantiate objects
+     * @param log The logger to use to report any issues. It may only be null if
+     *            the filterMode does not require logging
+     * @param allowedClassNamePattern The regular expression to use to filter
+     *                                deserialized classes. The fully qualified
+     *                                class name must match this pattern for
+     *                                deserialization to be allowed if filtering
+     *                                is enabled.
+     * @param warnOnFailure Should any failures be logged?
+     *
+     * @exception IOException if an input/output error occurs
+     */
+    public CustomObjectInputStream(InputStream stream, ClassLoader classLoader,
+            Log log, Pattern allowedClassNamePattern, boolean warnOnFailure)
+            throws IOException {
         super(stream);
+        if (log == null && allowedClassNamePattern != null && warnOnFailure) {
+            throw new IllegalArgumentException(
+                    sm.getString("customObjectInputStream.logRequired"));
+        }        
         this.classLoader = classLoader;
+        this.log = log;
+        this.allowedClassNamePattern = allowedClassNamePattern;
+        if (allowedClassNamePattern == null) {
+            this.allowedClassNameFilter = null;
+        } else {
+            this.allowedClassNameFilter = allowedClassNamePattern.toString();
+        }
+        this.warnOnFailure = warnOnFailure;
+
+        Map<String,Boolean> reportedClasses;
+        synchronized (reportedClassCache) {
+            reportedClasses = reportedClassCache.get(classLoader);
+            if (reportedClasses == null) {
+                reportedClasses = new ConcurrentHashMap<String,Boolean>();
+                reportedClassCache.put(classLoader, reportedClasses);
+            }
+        }
+        this.reportedClasses = reportedClasses;        
     }
 
 
@@ -71,8 +136,24 @@
      */
     public Class resolveClass(ObjectStreamClass classDesc)
         throws ClassNotFoundException, IOException {
+
+        String name = classDesc.getName();
+        if (allowedClassNamePattern != null) {
+            boolean allowed = allowedClassNamePattern.matcher(name).matches();
+            if (!allowed) {
+                boolean doLog = warnOnFailure && reportedClasses.put(name, Boolean.FALSE) == null;
+                String msg = sm.getString("customObjectInputStream.nomatch", name, allowedClassNameFilter);
+                if (doLog) {
+                    log.warn(msg);
+                } else if (log.isDebugEnabled()) {
+                    log.debug(msg);
+                }
+                throw new InvalidClassException(msg);
+            }
+        }
+
         try {
-            return Class.forName(classDesc.getName(), false, classLoader);
+            return Class.forName(name, false, classLoader);
         } catch (ClassNotFoundException e) {
             // Try also the superclass because of primitive types
             return super.resolveClass(classDesc);
--- java/org/apache/catalina/util/LocalStrings.properties.orig	2016-08-02 13:48:37.550862544 -0400
+++ java/org/apache/catalina/util/LocalStrings.properties	2016-08-02 14:59:55.316007784 -0400
@@ -17,6 +17,8 @@
 resourceSet.locked=No modifications are allowed to a locked ResourceSet
 hexUtil.bad=Bad hexadecimal digit
 hexUtil.odd=Odd number of hexadecimal digits
+customObjectInputStream.logRequired=A valid logger is required for class name filtering with logging
+customObjectInputStream.nomatch=The class [{0}] did not match the regular expression [{1}] for classes allowed to be deserialized
 #Default Messages Utilized by the ExtensionValidator
 extensionValidator.web-application-manifest=Web Application Manifest
 extensionValidator.extension-not-found-error=ExtensionValidator[{0}][{1}]: Required extension "{2}" not found.
