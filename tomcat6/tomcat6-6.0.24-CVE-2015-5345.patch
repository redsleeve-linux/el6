--- java/org/apache/catalina/authenticator/FormAuthenticator.java.orig	2016-08-02 15:44:27.234112067 -0400
+++ java/org/apache/catalina/authenticator/FormAuthenticator.java	2016-08-02 15:44:27.250112115 -0400
@@ -232,6 +232,20 @@
 
         // No -- Save this request and redirect to the form login page
         if (!loginAction) {
+            // If this request was to the root of the context without a trailing
+            // '/', need to redirect to add it else the submit of the login form
+            // may not go to the correct web application
+            if (request.getServletPath().length() == 0 && request.getPathInfo() == null) {
+                StringBuilder location = new StringBuilder(requestURI);
+                location.append('/');
+                if (request.getQueryString() != null) {
+                    location.append('?');
+                    location.append(request.getQueryString());
+                }
+                response.sendRedirect(response.encodeRedirectURL(location.toString()));
+                return false;
+            }
+
             session = request.getSessionInternal(true);
             if (log.isDebugEnabled())
                 log.debug("Save request in session '" + session.getIdInternal() + "'");
--- java/org/apache/catalina/connector/MapperListener.java.orig	2016-08-15 12:09:02.704044205 -0400
+++ java/org/apache/catalina/connector/MapperListener.java	2016-08-15 12:07:58.113147801 -0400
@@ -28,6 +28,7 @@
 
 import org.apache.catalina.ContainerEvent;
 import org.apache.catalina.ContainerListener;
+import org.apache.catalina.Context;
 import org.apache.catalina.Host;
 import org.apache.catalina.core.StandardContext;
 import org.apache.juli.logging.Log;
@@ -413,8 +414,7 @@
              log.debug(sm.getString
                   ("mapperListener.registerContext", contextName));
 
-        Object context = 
-            mBeanServer.invoke(objectName, "findMappingObject", null, null);
+        Context context = (Context) mBeanServer.invoke(objectName, "findMappingObject", null, null);
             //mBeanServer.getAttribute(objectName, "mappingObject");
         javax.naming.Context resources = (javax.naming.Context)
             mBeanServer.invoke(objectName, "findStaticResources", null, null);
@@ -422,8 +422,9 @@
         String[] welcomeFiles = (String[])
             mBeanServer.getAttribute(objectName, "welcomeFiles");
 
-        mapper.addContext(hostName, contextName, context, 
-                          welcomeFiles, resources);
+        mapper.addContext(hostName, contextName, context, welcomeFiles, resources,
+                context.getMapperContextRootRedirectEnabled(),
+                context.getMapperDirectoryRedirectEnabled());
 
     }
 
@@ -472,10 +473,10 @@
         // Don't un-map a context that is paused
         MessageBytes hostMB = MessageBytes.newInstance();
         hostMB.setString(hostName);
-        MessageBytes contextMB = MessageBytes.newInstance();
-        contextMB.setString(contextName);
+        MessageBytes uriMB = MessageBytes.newInstance();
+        uriMB.setString(contextName.length() > 0 ? contextName : "/");
         MappingData mappingData = new MappingData();
-        mapper.map(hostMB, contextMB, mappingData);
+        mapper.map(hostMB, uriMB, mappingData);
         if (mappingData.context instanceof StandardContext &&
                 ((StandardContext)mappingData.context).getPaused()) {
             return;
--- java/org/apache/catalina/Context.java.orig	2016-08-02 15:44:27.236112073 -0400
+++ java/org/apache/catalina/Context.java	2016-08-02 15:44:27.245112100 -0400
@@ -1192,5 +1192,44 @@
      * @param listener Class name of a ContainerListener class to be removed
      */
     public void removeWrapperListener(String listener);
-}
 
+    /**
+     * If enabled, requests for a web application context root will be
+     * redirected (adding a trailing slash) by the Mapper. This is more
+     * efficient but has the side effect of confirming that the context path is
+     * valid.
+     *
+     * @param mapperContextRootRedirectEnabled Should the redirects be enabled?
+     */
+    public void setMapperContextRootRedirectEnabled(boolean mapperContextRootRedirectEnabled);
+
+    /**
+     * Determines if requests for a web application context root will be
+     * redirected (adding a trailing slash) by the Mapper. This is more
+     * efficient but has the side effect of confirming that the context path is
+     * valid.
+     *
+     * @return {@code true} if the Mapper level redirect is enabled for this
+     *         Context.
+     */
+    public boolean getMapperContextRootRedirectEnabled();
+
+    /**
+     * If enabled, requests for a directory will be redirected (adding a
+     * trailing slash) by the Mapper. This is more efficient but has the
+     * side effect of confirming that the directory is valid.
+     *
+     * @param mapperDirectoryRedirectEnabled Should the redirects be enabled?
+     */
+    public void setMapperDirectoryRedirectEnabled(boolean mapperDirectoryRedirectEnabled);
+
+    /**
+     * Determines if requests for a directory will be redirected (adding a
+     * trailing slash) by the Mapper. This is more efficient but has the
+     * side effect of confirming that the directory is valid.
+     *
+     * @return {@code true} if the Mapper level redirect is enabled for this
+     *         Context.
+     */
+    public boolean getMapperDirectoryRedirectEnabled();
+}
--- java/org/apache/catalina/core/mbeans-descriptors.xml.orig	2016-08-02 15:44:27.237112075 -0400
+++ java/org/apache/catalina/core/mbeans-descriptors.xml	2016-08-02 15:44:27.245112100 -0400
@@ -177,6 +177,14 @@
                description="The object used for mapping"
                type="java.lang.Object"/>
       
+    <attribute name="mapperContextRootRedirectEnabled"
+               description="Should the Mapper be used for context root redirects"
+               type="boolean" />
+
+    <attribute name="mapperDirectoryRedirectEnabled"
+               description="Should the Mapper be used for directory redirects"
+               type="boolean" />
+
     <attribute name="namingContextListener"
                description="Associated naming context listener."
                type="org.apache.catalina.core.NamingContextListener" />
--- java/org/apache/catalina/core/StandardContext.java.orig	2016-08-02 15:44:27.238112078 -0400
+++ java/org/apache/catalina/core/StandardContext.java	2016-08-15 13:01:34.649117211 -0400
@@ -779,9 +779,43 @@
      */
     private boolean clearReferencesThreadLocals = false;
 
+    boolean mapperContextRootRedirectEnabled = true;
+
+    boolean mapperDirectoryRedirectEnabled = false;
+
+
     // ----------------------------------------------------- Context Properties
+    
+    public void setMapperContextRootRedirectEnabled(boolean mapperContextRootRedirectEnabled) {
+        this.mapperContextRootRedirectEnabled = mapperContextRootRedirectEnabled;
+    }
+
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * The default value for this implementation is {@code false}.
+     */
+    public boolean getMapperContextRootRedirectEnabled() {
+        return mapperContextRootRedirectEnabled;
+    }
+
+
+    public void setMapperDirectoryRedirectEnabled(boolean mapperDirectoryRedirectEnabled) {
+        this.mapperDirectoryRedirectEnabled = mapperDirectoryRedirectEnabled;
+    }
 
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * The default value for this implementation is {@code false}.
+     */
+    public boolean getMapperDirectoryRedirectEnabled() {
+        return mapperDirectoryRedirectEnabled;
+    }
+
+    
     public AnnotationProcessor getAnnotationProcessor() {
        return annotationProcessor;
     }
--- java/org/apache/catalina/servlets/DefaultServlet.java.orig	2016-08-02 15:44:27.239112081 -0400
+++ java/org/apache/catalina/servlets/DefaultServlet.java	2016-08-02 16:00:17.165946668 -0400
@@ -355,6 +355,10 @@
      * @param request The servlet request we are processing
      */
     protected String getRelativePath(HttpServletRequest request) {
+        return getRelativePath(request, false);
+    }
+
+    protected String getRelativePath(HttpServletRequest request, boolean allowEmptyPath) {
         // IMPORTANT: DefaultServlet can be mapped to '/' or '/path/*' but always
         // serves resources from the web app root with context rooted paths.
         // i.e. it can not be used to mount the web app root under a sub-path
@@ -752,7 +756,8 @@
         throws IOException, ServletException {
 
         // Identify the requested resource path
-        String path = getRelativePath(request);
+        String path = getRelativePath(request, true);
+
         if (debug > 0) {
             if (content)
                 log("DefaultServlet.serveResource:  Serving resource '" +
@@ -762,6 +767,12 @@
                     path + "' headers only");
         }
 
+        if (path.length() == 0) {
+            // Context root redirect
+            doDirectoryRedirect(request, response);
+            return;
+        }
+
         CacheEntry cacheEntry = resources.lookupCache(path);
 
         if (!cacheEntry.exists) {
@@ -836,6 +847,11 @@
 
         if (cacheEntry.context != null) {
 
+            if (!path.endsWith("/")) {
+                doDirectoryRedirect(request, response);
+                return;
+            }
+
             // Skip directory listings if we have been configured to
             // suppress them
             if (!listings) {
@@ -1017,6 +1033,16 @@
 
     }
 
+    private void doDirectoryRedirect(HttpServletRequest request, HttpServletResponse response)
+            throws IOException {
+        StringBuilder location = new StringBuilder(request.getRequestURI());
+        location.append('/');
+        if (request.getQueryString() != null) {
+            location.append('?');
+            location.append(request.getQueryString());
+        }
+        response.sendRedirect(response.encodeRedirectURL(location.toString()));
+    }
 
     /**
      * Parse the content-range header.
--- java/org/apache/catalina/servlets/WebdavServlet.java.orig	2016-08-02 15:44:27.240112084 -0400
+++ java/org/apache/catalina/servlets/WebdavServlet.java	2016-08-02 15:52:13.293510643 -0400
@@ -375,6 +375,11 @@
      * @param request The servlet request we are processing
      */
     protected String getRelativePath(HttpServletRequest request) {
+        return getRelativePath(request, false);
+    }
+
+    @Override
+    protected String getRelativePath(HttpServletRequest request, boolean allowEmptyPath) {
         // Are we being processed by a RequestDispatcher.include()?
         if (request.getAttribute(Globals.INCLUDE_REQUEST_URI_ATTR) != null) {
             String result = (String) request.getAttribute(
--- java/org/apache/tomcat/util/http/mapper/Mapper.java.orig	2016-08-02 15:44:27.241112088 -0400
+++ java/org/apache/tomcat/util/http/mapper/Mapper.java	2016-08-02 15:44:27.249112112 -0400
@@ -208,10 +208,29 @@
      * @param context Context object
      * @param welcomeResources Welcome files defined for this context
      * @param resources Static resources of the context
+     * @deprecated Use {@link #addContext(String, String, Object, String[],
+     *             javax.naming.Context, boolean, boolean)}
      */
-    public void addContext
-        (String hostName, String path, Object context,
-         String[] welcomeResources, javax.naming.Context resources) {
+    @Deprecated
+    public void addContext(String hostName, String path, Object context,
+            String[] welcomeResources, javax.naming.Context resources) {
+        addContext(hostName, path, context, welcomeResources, resources, false, false);
+    }
+    
+    /**
+     * Add a new Context to an existing Host.
+     *
+     * @param hostName Virtual host name this context belongs to
+     * @param path Context path
+     * @param context Context object
+     * @param welcomeResources Welcome files defined for this context
+     * @param resources Static resources of the context
+     * @param mapperContextRootRedirectEnabled Mapper does context root redirects
+     * @param mapperDirectoryRedirectEnabled Mapper does directory redirects
+     */
+    public void addContext(String hostName, String path, Object context, String[] welcomeResources,
+            javax.naming.Context resources, boolean mapperContextRootRedirectEnabled,
+            boolean mapperDirectoryRedirectEnabled) {
 
         Host[] hosts = this.hosts;
         int pos = find(hosts, hostName);
@@ -241,9 +260,10 @@
                 if (insertMap(contexts, newContexts, newContext)) {
                     host.contextList.contexts = newContexts;
                 }
+                newContext.mapperContextRootRedirectEnabled = mapperContextRootRedirectEnabled;
+                newContext.mapperDirectoryRedirectEnabled = mapperDirectoryRedirectEnabled;
             }
         }
-
     }
 
 
@@ -679,20 +699,13 @@
 
         int pathOffset = path.getOffset();
         int pathEnd = path.getEnd();
-        int servletPath = pathOffset;
         boolean noServletPath = false;
 
         int length = context.name.length();
-        if (length != (pathEnd - pathOffset)) {
-            servletPath = pathOffset + length;
-        } else {
+        if (length == (pathEnd - pathOffset)) {
             noServletPath = true;
-            path.append('/');
-            pathOffset = path.getOffset();
-            pathEnd = path.getEnd();
-            servletPath = pathOffset+length;
         }
-
+        int servletPath = pathOffset + length;
         path.setOffset(servletPath);
 
         // Rule 1 -- Exact Match
@@ -727,10 +740,13 @@
             }
         }
 
-        if(mappingData.wrapper == null && noServletPath) {
+        if(mappingData.wrapper == null && noServletPath &&
+                context.mapperContextRootRedirectEnabled) {
             // The path is empty, redirect to "/"
+            path.append('/');
+            pathEnd = path.getEnd();
             mappingData.redirectPath.setChars
-                (path.getBuffer(), pathOffset, pathEnd-pathOffset);
+                (path.getBuffer(), pathOffset, pathEnd - pathOffset);
             path.setEnd(pathEnd - 1);
             return;
         }
@@ -820,11 +836,16 @@
                 Object file = null;
                 String pathStr = path.toString();
                 try {
-                    file = context.resources.lookup(pathStr);
+                    if (pathStr.length() == 0) {
+                        file = context.resources.lookup("/");
+                    } else {
+                        file = context.resources.lookup(pathStr);
+                    }
                 } catch(NamingException nex) {
                     // Swallow, since someone else handles the 404
                 }
-                if (file != null && file instanceof DirContext) {
+                if (file != null && file instanceof DirContext &&
+                        context.mapperDirectoryRedirectEnabled) {
                     // Note: this mutates the path: do not do any processing 
                     // after this (since we set the redirectPath, there 
                     // shouldn't be any)
@@ -841,7 +862,6 @@
 
         path.setOffset(pathOffset);
         path.setEnd(pathEnd);
-
     }
 
 
@@ -1309,7 +1329,8 @@
         public Wrapper[] wildcardWrappers = new Wrapper[0];
         public Wrapper[] extensionWrappers = new Wrapper[0];
         public int nesting = 0;
-
+        public boolean mapperContextRootRedirectEnabled = false;
+        public boolean mapperDirectoryRedirectEnabled = false;
     }
 
 
@@ -1322,117 +1343,4 @@
         public String path = null;
         public boolean jspWildCard = false;
     }
-
-
-    // -------------------------------------------------------- Testing Methods
-
-    // FIXME: Externalize this
-    /*
-    public static void main(String args[]) {
-
-        try {
-
-        Mapper mapper = new Mapper();
-        System.out.println("Start");
-
-        mapper.addHost("sjbjdvwsbvhrb", new String[0], "blah1");
-        mapper.addHost("sjbjdvwsbvhr/", new String[0], "blah1");
-        mapper.addHost("wekhfewuifweuibf", new String[0], "blah2");
-        mapper.addHost("ylwrehirkuewh", new String[0], "blah3");
-        mapper.addHost("iohgeoihro", new String[0], "blah4");
-        mapper.addHost("fwehoihoihwfeo", new String[0], "blah5");
-        mapper.addHost("owefojiwefoi", new String[0], "blah6");
-        mapper.addHost("iowejoiejfoiew", new String[0], "blah7");
-        mapper.addHost("iowejoiejfoiew", new String[0], "blah17");
-        mapper.addHost("ohewoihfewoih", new String[0], "blah8");
-        mapper.addHost("fewohfoweoih", new String[0], "blah9");
-        mapper.addHost("ttthtiuhwoih", new String[0], "blah10");
-        mapper.addHost("lkwefjwojweffewoih", new String[0], "blah11");
-        mapper.addHost("zzzuyopjvewpovewjhfewoih", new String[0], "blah12");
-        mapper.addHost("xxxxgqwiwoih", new String[0], "blah13");
-        mapper.addHost("qwigqwiwoih", new String[0], "blah14");
-
-        System.out.println("Map:");
-        for (int i = 0; i < mapper.hosts.length; i++) {
-            System.out.println(mapper.hosts[i].name);
-        }
-
-        mapper.setDefaultHostName("ylwrehirkuewh");
-
-        String[] welcomes = new String[2];
-        welcomes[0] = "boo/baba";
-        welcomes[1] = "bobou";
-
-        mapper.addContext("iowejoiejfoiew", "", "context0", new String[0], null);
-        mapper.addContext("iowejoiejfoiew", "/foo", "context1", new String[0], null);
-        mapper.addContext("iowejoiejfoiew", "/foo/bar", "context2", welcomes, null);
-        mapper.addContext("iowejoiejfoiew", "/foo/bar/bla", "context3", new String[0], null);
-
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/fo/*", "wrapper0");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/", "wrapper1");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blh", "wrapper2");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "*.jsp", "wrapper3");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blah/bou/*", "wrapper4");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blah/bobou/*", "wrapper5");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "*.htm", "wrapper6");
-
-        MappingData mappingData = new MappingData();
-        MessageBytes host = MessageBytes.newInstance();
-        host.setString("iowejoiejfoiew");
-        MessageBytes uri = MessageBytes.newInstance();
-        uri.setString("/foo/bar/blah/bobou/foo");
-        uri.toChars();
-        uri.getCharChunk().setLimit(-1);
-
-        mapper.map(host, uri, mappingData);
-        System.out.println("MD Host:" + mappingData.host);
-        System.out.println("MD Context:" + mappingData.context);
-        System.out.println("MD Wrapper:" + mappingData.wrapper);
-
-        System.out.println("contextPath:" + mappingData.contextPath);
-        System.out.println("wrapperPath:" + mappingData.wrapperPath);
-        System.out.println("pathInfo:" + mappingData.pathInfo);
-        System.out.println("redirectPath:" + mappingData.redirectPath);
-
-        mappingData.recycle();
-        mapper.map(host, uri, mappingData);
-        System.out.println("MD Host:" + mappingData.host);
-        System.out.println("MD Context:" + mappingData.context);
-        System.out.println("MD Wrapper:" + mappingData.wrapper);
-
-        System.out.println("contextPath:" + mappingData.contextPath);
-        System.out.println("wrapperPath:" + mappingData.wrapperPath);
-        System.out.println("pathInfo:" + mappingData.pathInfo);
-        System.out.println("redirectPath:" + mappingData.redirectPath);
-
-        for (int i = 0; i < 1000000; i++) {
-            mappingData.recycle();
-            mapper.map(host, uri, mappingData);
-        }
-
-        long time = System.currentTimeMillis();
-        for (int i = 0; i < 1000000; i++) {
-            mappingData.recycle();
-            mapper.map(host, uri, mappingData);
-        }
-        System.out.println("Elapsed:" + (System.currentTimeMillis() - time));
-
-        System.out.println("MD Host:" + mappingData.host);
-        System.out.println("MD Context:" + mappingData.context);
-        System.out.println("MD Wrapper:" + mappingData.wrapper);
-
-        System.out.println("contextPath:" + mappingData.contextPath);
-        System.out.println("wrapperPath:" + mappingData.wrapperPath);
-        System.out.println("requestPath:" + mappingData.requestPath);
-        System.out.println("pathInfo:" + mappingData.pathInfo);
-        System.out.println("redirectPath:" + mappingData.redirectPath);
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-
-    }
-    */
-
-
 }
--- webapps/docs/changelog.xml.orig	2016-08-15 12:09:02.704044205 -0400
+++ webapps/docs/changelog.xml	2016-08-15 12:08:32.255093042 -0400
@@ -46,6 +46,21 @@
 <section name="Tomcat 6.0.24-97 (csutherl)">
   <subsection name="Catalina">
     <changelog>
+      <fix>
+        <bug>58817</bug>: Fix <code>ArrayIndexOutOfBoundsException</code>
+        caused by <code>MapperListener</code> when ROOT context is being
+        undeployed and mapperContextRootRedirectEnabled="false". (kkolinko)
+      </fix>
+      <add>
+        Move the functionality that provides redirects for context roots and
+        directories where a trailing <code>/</code> is added from the Mapper to
+        the <code>DefaultServlet</code>. This enables such requests to be
+        processed by any configured Valves and Filters before the redirect is
+        made. This behaviour is configurable via the
+        <code>mapperContextRootRedirectEnabled</code> and
+        <code>mapperDirectoryRedirectEnabled</code> attributes of the Context
+        which may be used to restore the previous behaviour. (markt)
+      </add>
       <add>
         Extend the session attribute filtering options to include filtering
         based on the implementation class of the value and optional
--- webapps/docs/config/context.xml.orig	2016-08-02 15:44:27.242112091 -0400
+++ webapps/docs/config/context.xml	2016-08-15 13:01:34.648117212 -0400
@@ -285,6 +285,22 @@
         class loaders.</p>
       </attribute>
 
+      <attribute name="mapperContextRootRedirectEnabled" required="false">
+        <p>If enabled, requests for a web application context root will be
+        redirected (adding a trailing slash) if necessary by the Mapper rather
+        than the default Servlet. This is more efficient but has the side effect
+        of confirming that the context path exists. If not specified, the
+        default value of <code>true</code> is used.</p>
+      </attribute>
+
+      <attribute name="mapperDirectoryRedirectEnabled" required="false">
+        <p>If enabled, requests for a web application directory will be
+        redirected (adding a trailing slash) if necessary by the Mapper rather
+        than the default Servlet. This is more efficient but has the side effect
+        of confirming that the directory is exists. If not specified, the
+        default value of <code>false</code> is used.</p>
+      </attribute>
+
       <attribute name="path" required="false">
         <p>The <em>context path</em> of this web application, which is
         matched against the beginning of each request URI to select the
