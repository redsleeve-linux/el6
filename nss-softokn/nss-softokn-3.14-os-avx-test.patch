diff -up ./mozilla/security/nss/lib/freebl/rijndael.c.os_avx_test ./mozilla/security/nss/lib/freebl/rijndael.c
--- ./mozilla/security/nss/lib/freebl/rijndael.c.os_avx_test	2016-05-12 15:55:29.177356669 -0700
+++ ./mozilla/security/nss/lib/freebl/rijndael.c	2016-05-12 16:02:07.861345042 -0700
@@ -967,6 +967,36 @@ AESContext * AES_AllocateContext(void)
     return PORT_ZNew(AESContext);
 }
 
+#ifdef USE_HW_GCM
+/*
+ * Adapted from the example code in "How to detect New Instruction support in
+ * the 4th generation Intel Core processor family" by Max Locktyukhin.
+ *
+ * XGETBV:
+ *   Reads an extended control register (XCR) specified by ECX into EDX:EAX.
+ */
+static PRBool
+check_xcr0_ymm()
+{
+    PRUint32 xcr0;
+#if defined(_MSC_VER)
+#if defined(_M_IX86)
+    __asm {
+        mov ecx, 0
+        xgetbv
+        mov xcr0, eax
+    }
+#else
+    xcr0 = (PRUint32)_xgetbv(0);  /* Requires VS2010 SP1 or later. */
+#endif
+#else
+    __asm__ ("xgetbv" : "=a" (xcr0) : "c" (0) : "%edx");
+#endif
+    /* Check if xmm and ymm state are enabled in XCR0. */
+    return (xcr0 & 6) == 6;
+}
+#endif
+
 
 /*
 ** Initialize a new AES context suitable for AES encryption/decryption in
@@ -1020,7 +1050,13 @@ aes_InitContext(AESContext *cx, const un
 	    disable_hw_gcm = getenv("NSS_DISABLE_HW_GCM");
 	    if (disable_hw_gcm == NULL) {
 		has_intel_clmul = (ecx & (1 << 1)) != 0 ? 1 : -1;
-		has_intel_avx = (ecx & (1 << 28)) != 0 ? 1 : -1;
+		if ((ecx & (1 << 27)) != 0 && (ecx & (1 << 28)) != 0 &&
+		    check_xcr0_ymm()) {
+		    has_intel_avx = 1;
+		} else {
+		    has_intel_avx = -1;
+		}
+
 	    }
 #endif
 	} else {
