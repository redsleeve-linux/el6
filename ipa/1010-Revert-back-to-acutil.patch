From 0369166080feb598fe71ff733c1812f41b5c8fe1 Mon Sep 17 00:00:00 2001
From: Martin Kosek <mkosek@redhat.com>
Date: Tue, 28 Aug 2012 12:25:33 +0200
Subject: [PATCH] Revert back to acutil

This patch reverts a DNS query capability based on python-dns
package back to authconfig's acutil based DNS queries. The original
change was made in commit f1ed123caddd7525a0081c4a9de931cabdfda43f.
Logging enhancements and DNS query refactoring made as a part of the
referred commit were not reverted.

This patch also enhances ipapython.dnsclient for __str__ function to
provide better debugging output of returned DNS records.
---
 freeipa.spec.in                      |   5 +-
 install/tools/ipa-dns-install        |   2 +-
 ipa-client/ipaclient/ipadiscovery.py |  60 ++---
 ipalib/plugins/dns.py                |   6 +-
 ipalib/rpc.py                        |  16 +-
 ipalib/util.py                       |  18 +-
 ipapython/README                     |   3 +-
 ipapython/config.py                  |  64 +++---
 ipapython/dnsclient.py               | 431 +++++++++++++++++++++++++++++++++++
 ipapython/ipautil.py                 |  15 +-
 ipaserver/install/installutils.py    |  18 +-
 11 files changed, 526 insertions(+), 112 deletions(-)
 create mode 100644 ipapython/dnsclient.py

diff --git a/freeipa.spec.in b/freeipa.spec.in
index 6266f06e4609edec86ef1615323b988cb992957c..427b59917633cc38cdb55f869f84fdbc3d9e6233 100644
--- a/freeipa.spec.in
+++ b/freeipa.spec.in
@@ -87,10 +87,10 @@ BuildRequires:  python-memcached
 BuildRequires:  sssd >= 1.8.0
 BuildRequires:  python-lxml
 BuildRequires:  python-pyasn1 >= 0.0.9a
-BuildRequires:  python-dns
 BuildRequires:  python-crypto
 BuildRequires:  check >= 0.9.5
 BuildRequires:  libsss_idmap-devel
+BuildRequires:  authconfig
 
 %description
 IPA is an integrated solution to provide centrally managed Identity (machine,
@@ -172,7 +172,6 @@ Requires(postun): python systemd-units
 Requires(preun):  python initscripts chkconfig
 Requires(postun): python initscripts chkconfig
 %endif
-Requires: python-dns
 Requires: keyutils
 Requires: zip
 
@@ -276,7 +275,6 @@ Requires: nss-tools
 Requires: bind-utils
 Requires: oddjob-mkhomedir
 Requires: python-krbV
-Requires: python-dns
 Requires: libsss_autofs
 Requires: autofs
 Requires: libnfsidmap
@@ -317,6 +315,7 @@ Group: System Environment/Libraries
 %if 0%{?fedora} >= 12 || 0%{?rhel} >= 6
 Requires: python-kerberos >= 1.1-3
 %endif
+Requires: authconfig
 Requires: gnupg
 Requires: iproute
 Requires: pyOpenSSL
diff --git a/install/tools/ipa-dns-install b/install/tools/ipa-dns-install
index 2de2b569dec451c092e04ae76be70ef474ad2285..02ae3327aa97b5233967c9b4db65e594892f7a3c 100755
--- a/install/tools/ipa-dns-install
+++ b/install/tools/ipa-dns-install
@@ -237,7 +237,7 @@ def main():
                serial_autoincrement=options.serial_autoincrement)
     bind.create_instance()
 
-    # Restart http instance to make sure that python-dns has the right resolver
+    # Restart http instance to make sure acutil has the right resolver
     # https://bugzilla.redhat.com/show_bug.cgi?id=800368
     http = httpinstance.HTTPInstance(fstore)
     service.print_msg("Restarting the web server")
diff --git a/ipa-client/ipaclient/ipadiscovery.py b/ipa-client/ipaclient/ipadiscovery.py
index fe24757d55f644e1108e42e16e9d0aaf5df92e0a..a616d1fbfc4b8d8a968c46f5ce81d85aecf8edc2 100644
--- a/ipa-client/ipaclient/ipadiscovery.py
+++ b/ipa-client/ipaclient/ipadiscovery.py
@@ -24,12 +24,11 @@ from ipapython.ipa_log_manager import *
 import tempfile
 import ldap
 from ldap import LDAPError
-from dns import resolver, rdatatype
-from dns.exception import DNSException
 
 from ipapython.ipautil import run, CalledProcessError, valid_ip, get_ipa_basedn, \
                               realm_to_suffix, format_netloc
 from ipapython.dn import DN
+from ipapython import dnsclient
 
 CACERT = '/etc/ipa/ca.crt'
 
@@ -428,26 +427,28 @@ class IPADiscovery(object):
         servers = []
 
         qname = '%s.%s' % (srv_record_name, domain)
+        if not qname.endswith("."):
+            qname += "."
 
         root_logger.debug("Search DNS for SRV record of %s", qname)
 
-        try:
-            answers = resolver.query(qname, rdatatype.SRV)
-        except DNSException, e:
-            root_logger.debug("DNS record not found: %s", e.__class__.__name__)
-            answers = []
-
-        for answer in answers:
-            root_logger.debug("DNS record found: %s", answer)
-            server = str(answer.target).rstrip(".")
-            if not server:
-                root_logger.debug("Cannot parse the hostname from SRV record: %s", answer)
-                continue
-            if default_port is not None and answer.port != default_port:
-                server = "%s:%s" % (server, str(answer.port))
-            servers.append(server)
-            if break_on_first:
-                break
+        results = dnsclient.query(qname, dnsclient.DNS_C_IN, dnsclient.DNS_T_SRV)
+        if not results:
+            root_logger.debug("No DNS record found")
+
+        for result in results:
+            if result.dns_type == dnsclient.DNS_T_SRV:
+                root_logger.debug("DNS record found: %s", result)
+                server = result.rdata.server.rstrip(".")
+                if not server:
+                    root_logger.debug("Cannot parse the hostname from SRV record: %s", result)
+                    continue
+                if default_port is not None and \
+                        result.rdata.port and result.rdata.port != default_port:
+                    server = "%s:%s" % (server, result.rdata.port)
+                servers.append(server)
+                if break_on_first:
+                    break
 
         return servers
 
@@ -457,19 +458,20 @@ class IPADiscovery(object):
             domain = self.domain
         # now, check for a Kerberos realm the local host or domain is in
         qname = "_kerberos." + domain
+        if not qname.endswith("."):
+            qname += "."
 
         root_logger.debug("Search DNS for TXT record of %s", qname)
 
-        try:
-            answers = resolver.query(qname, rdatatype.TXT)
-        except DNSException, e:
-            root_logger.debug("DNS record not found: %s", e.__class__.__name__)
-            answers = []
-
-        for answer in answers:
-            root_logger.debug("DNS record found: %s", answer)
-            if answer.strings:
-                realm = answer.strings[0]
+        results = dnsclient.query(qname, dnsclient.DNS_C_IN, dnsclient.DNS_T_TXT)
+        if not results:
+            root_logger.debug("No DNS record found")
+
+        for result in results:
+            if result.dns_type == dnsclient.DNS_T_TXT:
+                root_logger.debug("DNS record found: %s", result)
+                if result.rdata.data:
+                    realm = result.rdata.data
                 if realm:
                     break
         return realm
diff --git a/ipalib/plugins/dns.py b/ipalib/plugins/dns.py
index 07e638179614649f9b07c1401265e1a66321576c..460b408e56f39ff1c29bac2c75450395280b488a 100644
--- a/ipalib/plugins/dns.py
+++ b/ipalib/plugins/dns.py
@@ -23,7 +23,6 @@ from __future__ import absolute_import
 import netaddr
 import time
 import re
-import dns.name
 
 from ipalib.request import context
 from ipalib import api, errors, output
@@ -1527,8 +1526,9 @@ def check_ns_rec_resolvable(zone, name):
         name = normalize_zone(zone)
     elif not name.endswith('.'):
         # this is a DNS name relative to the zone
-        zone = dns.name.from_text(zone)
-        name = unicode(dns.name.from_text(name, origin=zone))
+        if not zone.endswith('.'):
+            zone += '.'
+        name = "%s.%s" % (name, zone)
     try:
         return api.Command['dns_resolve'](name)
     except errors.NotFound:
diff --git a/ipalib/rpc.py b/ipalib/rpc.py
index 94593ce51f0f735c280286a0dcf947f62e55b9b8..67696254eb5905bde57eedb81e5833bcbcaf4010 100644
--- a/ipalib/rpc.py
+++ b/ipalib/rpc.py
@@ -41,8 +41,6 @@ import datetime
 from xmlrpclib import (Binary, Fault, dumps, loads, ServerProxy, Transport,
         ProtocolError, MININT, MAXINT)
 import kerberos
-from dns import resolver, rdatatype
-from dns.exception import DNSException
 
 from ipalib.backend import Connectible
 from ipalib.errors import public_errors, PublicError, UnknownError, NetworkError, KerberosError, XMLRPCMarshallError
@@ -54,6 +52,7 @@ from ipapython import ipautil
 from ipapython import kernel_keyring
 from ipapython.cookie import Cookie
 from ipalib.text import _
+from ipapython import dnsclient
 
 import httplib
 import socket
@@ -481,14 +480,11 @@ class xmlclient(Connectible):
         servers = []
         name = '_ldap._tcp.%s.' % self.env.domain
 
-        try:
-            answers = resolver.query(name, rdatatype.SRV)
-        except DNSException, e:
-            answers = []
-
-        for answer in answers:
-            server = str(answer.target).rstrip(".")
-            servers.append('https://%s%s' % (ipautil.format_netloc(server), path))
+        rs = dnsclient.query(name, dnsclient.DNS_C_IN, dnsclient.DNS_T_SRV)
+        for r in rs:
+            if r.dns_type == dnsclient.DNS_T_SRV:
+                rsrv = r.rdata.server.rstrip('.')
+                servers.append('https://%s%s' % (ipautil.format_netloc(rsrv), path))
 
         servers = list(set(servers))
         # the list/set conversion won't preserve order so stick in the
diff --git a/ipalib/util.py b/ipalib/util.py
index 75f64bf97a9896f0d99f80da4793240186c1f9da..4eac7ee267e96ede522c49159c378cdf292a85ed 100644
--- a/ipalib/util.py
+++ b/ipalib/util.py
@@ -30,12 +30,11 @@ import decimal
 import netaddr
 from types import NoneType
 from weakref import WeakKeyDictionary
-from dns import resolver, rdatatype
-from dns.exception import DNSException
 
 from ipalib import errors
 from ipalib.text import _
 from ipapython.ssh import SSHPublicKey
+from ipapython import dnsclient
 from ipapython.dn import DN, RDN
 
 
@@ -93,17 +92,18 @@ def validate_host_dns(log, fqdn):
     """
     See if the hostname has a DNS A record.
     """
-    try:
-        answers = resolver.query(fqdn, rdatatype.A)
-        log.debug(
-            'IPA: found %d records for %s: %s' % (len(answers), fqdn,
-                ' '.join(str(answer) for answer in answers))
-        )
-    except DNSException, e:
+    if not fqdn.endswith('.'):
+        fqdn += '.'
+    rs = dnsclient.query(fqdn, dnsclient.DNS_C_IN, dnsclient.DNS_T_A)
+    if len(rs) == 0:
         log.debug(
             'IPA: DNS A record lookup failed for %s' % fqdn
         )
         raise errors.DNSNotARecordError()
+    else:
+        log.debug(
+            'IPA: found %d records for %s' % (len(rs), fqdn)
+        )
 
 def normalize_name(name):
     result = dict()
diff --git a/ipapython/README b/ipapython/README
index a724a7faa4c9a7997b55a620654e31cd16cf8d16..ec2bb3a52cbd08073bfc4851f2fe3d3e3934ea10 100644
--- a/ipapython/README
+++ b/ipapython/README
@@ -3,9 +3,10 @@ geared currently towards command-line tools.
 
 A brief overview:
 
-config.py - identify the IPA server domain and realm. It uses python-dns to
+config.py - identify the IPA server domain and realm. It uses dnsclient to
             try to detect this information first and will fall back to
             /etc/ipa/default.conf if that fails.
+dnsclient.py - find IPA information via DNS
 
 ipautil.py - helper functions
 
diff --git a/ipapython/config.py b/ipapython/config.py
index b9b0b4e3d0041f728e456e75b31184f9b217a66b..4bb12072e465a0dc9dec0e64ca9834d52b0091e0 100644
--- a/ipapython/config.py
+++ b/ipapython/config.py
@@ -20,10 +20,8 @@
 import ConfigParser
 from optparse import Option, Values, OptionParser, IndentedHelpFormatter, OptionValueError
 from copy import copy
-from dns import resolver, rdatatype
-from dns.exception import DNSException
 from ipapython.dn import DN
-import dns.name
+import ipapython.dnsclient
 
 import socket
 import re
@@ -173,7 +171,7 @@ def __parse_config(discover_server = True):
         pass
 
 def __discover_config(discover_server = True):
-    servers = []
+    rl = 0
     try:
         if not config.default_realm:
             try:
@@ -187,46 +185,36 @@ def __discover_config(discover_server = True):
                 return False
 
         if not config.default_domain:
-            # try once with REALM -> domain
-            domain = str(config.default_realm).lower()
-            name = "_ldap._tcp." + domain
-
-            try:
-                servers = resolver.query(name, rdatatype.SRV)
-            except DNSException:
-                # try cycling on domain components of FQDN
-                try:
-                    domain = dns.name.from_text(socket.getfqdn())
-                except DNSException:
+            #try once with REALM -> domain
+            dom_name = str(config.default_realm).lower()
+            name = "_ldap._tcp."+dom_name+"."
+            rs = ipapython.dnsclient.query(name, ipapython.dnsclient.DNS_C_IN, ipapython.dnsclient.DNS_T_SRV)
+            rl = len(rs)
+            if rl == 0:
+                #try cycling on domain components of FQDN
+                dom_name = socket.getfqdn()
+            while rl == 0:
+                tok = dom_name.find(".")
+                if tok == -1:
                     return False
+                dom_name = dom_name[tok+1:]
+                name = "_ldap._tcp." + dom_name + "."
+                rs = ipapython.dnsclient.query(name, ipapython.dnsclient.DNS_C_IN, ipapython.dnsclient.DNS_T_SRV)
+                rl = len(rs)
 
-                while True:
-                    domain = domain.parent()
-
-                    if str(domain) == '.':
-                        return False
-                    name = "_ldap._tcp.%s" % domain
-                    try:
-                        servers = resolver.query(name, rdatatype.SRV)
-                        break
-                    except DNSException:
-                        pass
-
-            config.default_domain = str(domain).rstrip(".")
+            config.default_domain = dom_name
 
         if discover_server:
-            if not servers:
-                name = "_ldap._tcp.%s." % config.default_domain
-                try:
-                    servers = resolver.query(name, rdatatype.SRV)
-                except DNSException:
-                    pass
+            if rl == 0:
+                name = "_ldap._tcp."+config.default_domain+"."
+                rs = ipapython.dnsclient.query(name, ipapython.dnsclient.DNS_C_IN, ipapython.dnsclient.DNS_T_SRV)
 
-            for server in servers:
-                hostname = str(server.target).rstrip(".")
-                config.default_server.append(hostname)
+            for r in rs:
+                if r.dns_type == ipapython.dnsclient.DNS_T_SRV:
+                    rsrv = r.rdata.server.rstrip(".")
+                    config.default_server.append(rsrv)
 
-    except:
+    except Exception:
         pass
 
 def add_standard_options(parser):
diff --git a/ipapython/dnsclient.py b/ipapython/dnsclient.py
new file mode 100644
index 0000000000000000000000000000000000000000..535f629b88ebc59e4a381f134a1c74f12f055748
--- /dev/null
+++ b/ipapython/dnsclient.py
@@ -0,0 +1,431 @@
+#
+# Copyright 2001, 2005 Red Hat, Inc.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import struct
+import socket
+import sys
+
+import acutil
+
+DNS_C_IN = 1
+DNS_C_CS = 2
+DNS_C_CHAOS = 3
+DNS_C_HS = 4
+DNS_C_ANY = 255
+
+DNS_T_A = 1
+DNS_T_NS = 2
+DNS_T_CNAME = 5
+DNS_T_SOA = 6
+DNS_T_NULL = 10
+DNS_T_WKS = 11
+DNS_T_PTR = 12
+DNS_T_HINFO = 13
+DNS_T_MX = 15
+DNS_T_TXT = 16
+DNS_T_AAAA = 28
+DNS_T_SRV = 33
+DNS_T_ANY = 255
+
+DNS_S_QUERY = 1
+DNS_S_ANSWER = 2
+DNS_S_AUTHORITY = 3
+DNS_S_ADDITIONAL = 4
+
+DEBUG_DNSCLIENT = False
+
+class DNSQueryHeader:
+	FORMAT = "!HBBHHHH"
+	def __init__(self):
+		self.dns_id = 0
+		self.dns_rd = 0
+		self.dns_tc = 0
+		self.dns_aa = 0
+		self.dns_opcode = 0
+		self.dns_qr = 0
+		self.dns_rcode = 0
+		self.dns_z = 0
+		self.dns_ra = 0
+		self.dns_qdcount = 0
+		self.dns_ancount = 0
+		self.dns_nscount = 0
+		self.dns_arcount = 0
+
+	def pack(self):
+		return struct.pack(DNSQueryHeader.FORMAT,
+			self.dns_id,
+			(self.dns_rd & 1) |
+			(self.dns_tc & 1) << 1 |
+			(self.dns_aa & 1) << 2 |
+			(self.dns_opcode & 15) << 3 |
+			(self.dns_qr & 1) << 7,
+			(self.dns_rcode & 15) |
+			(self.dns_z & 7) << 4 |
+			(self.dns_ra & 1) << 7,
+			self.dns_qdcount,
+			self.dns_ancount,
+			self.dns_nscount,
+			self.dns_arcount)
+
+	def unpack(self, data):
+		(self.dns_id, byte1, byte2, self.dns_qdcount, self.dns_ancount,
+			self.dns_nscount, self.dns_arcount) = struct.unpack(DNSQueryHeader.FORMAT, data[0:self.size()])
+		self.dns_rd = byte1 & 1
+		self.dns_tc = (byte1 >> 1) & 1
+		self.dns_aa = (byte1 >> 2) & 1
+		self.dns_opcode = (byte1 >> 3) & 15
+		self.dns_qr = (byte1 >> 7) & 1
+		self.dns_rcode = byte2 & 15
+		self.dns_z = (byte2 >> 4) & 7
+		self.dns_ra = (byte1 >> 7) & 1
+
+	def size(self):
+		return struct.calcsize(DNSQueryHeader.FORMAT)
+
+def unpackQueryHeader(data):
+	header = DNSQueryHeader()
+	header.unpack(data)
+	return header
+
+class DNSResult:
+	FORMAT = "!HHIH"
+	QFORMAT = "!HH"
+	def __init__(self):
+		self.dns_name = ""
+		self.dns_type = 0
+		self.dns_class = 0
+		self.dns_ttl = 0
+		self.dns_rlength = 0
+		self.rdata = None
+		self.section = None
+
+	def unpack(self, data):
+		(self.dns_type, self.dns_class, self.dns_ttl,
+			self.dns_rlength) = struct.unpack(DNSResult.FORMAT, data[0:self.size()])
+
+	def qunpack(self, data):
+		(self.dns_type, self.dns_class) = struct.unpack(DNSResult.QFORMAT, data[0:self.qsize()])
+
+	def size(self):
+		return struct.calcsize(DNSResult.FORMAT)
+
+	def qsize(self):
+		return struct.calcsize(DNSResult.QFORMAT)
+
+	def __str__(self):
+		try:
+			result = 'DNSResult::name:%s,type:%d,class:%d,rdata={%s}' \
+				% (self.dns_name, self.dns_type, self.dns_class, self.rdata)
+		except Exception:
+			result = ''
+		return result
+
+class DNSRData:
+	def __init__(self):
+		pass
+
+	def __str__(self):
+		try:
+			rdata = ",".join(["%s:%s" % (key, value) for (key, value) \
+				in self.__dict__.iteritems()])
+		except Exception:
+			rdata = ''
+		return rdata
+
+def dnsNameToLabel(name):
+	out = ""
+	name = name.split(".")
+	for part in name:
+		out += chr(len(part)) + part
+	return out
+
+def dnsFormatQuery(query, qclass, qtype):
+	header = DNSQueryHeader()
+
+	header.dns_id = 0 # FIXME: id = 0
+	header.dns_rd = 1 # don't know why the original code didn't request recursion for non SOA requests
+	header.dns_qr = 0 # query
+	header.dns_opcode = 0 # standard query
+	header.dns_qdcount = 1 # single query
+
+	qlabel = dnsNameToLabel(query)
+	if not qlabel:
+		return ""
+
+	out = header.pack() + qlabel
+	out += chr(qtype >> 8)
+	out += chr(qtype & 0xff)
+	out += chr(qclass >> 8)
+	out += chr(qclass & 0xff)
+
+	return out
+
+def dnsParseLabel(label, base):
+	# returns (output, rest)
+	if not label:
+		return ("", None)
+
+	update = 1
+	rest = label
+	output = ""
+	skip = 0
+
+	try:
+		while ord(rest[0]):
+			if ord(rest[0]) & 0xc0:
+				rest = base[((ord(rest[0]) & 0x3f) << 8) + ord(rest[1]):]
+				if update:
+					skip += 2
+				update = 0
+				continue
+			output += rest[1:ord(rest[0]) + 1] + "."
+			if update:
+				skip += ord(rest[0]) + 1
+			rest = rest[ord(rest[0]) + 1:]
+	except IndexError:
+		return ("", None)
+	return (label[skip+update:], output)
+
+def dnsParseA(data, base):
+	rdata = DNSRData()
+	if len(data) < 4:
+		rdata.address = 0
+		return None
+
+	rdata.address = (ord(data[0])<<24) | (ord(data[1])<<16) | (ord(data[2])<<8) | (ord(data[3])<<0)
+
+	if DEBUG_DNSCLIENT:
+		print "A = %d.%d.%d.%d." % (ord(data[0]), ord(data[1]), ord(data[2]), ord(data[3]))
+	return rdata
+
+def dnsParseAAAA(data, base):
+	rdata = DNSRData()
+	if len(data) < 16:
+		rdata.address = 0
+		return None
+
+        rdata.address = list(struct.unpack('!16B', data))
+        if DEBUG_DNSCLIENT:
+            print socket.inet_ntop(socket.AF_INET6,
+                                   struct.pack('!16B', *rdata.address))
+        return rdata
+
+def dnsParseText(data):
+	if len(data) < 1:
+		return ("", None)
+	tlen = ord(data[0])
+	if len(data) < tlen + 1:
+		return ("", None)
+	return (data[tlen+1:], data[1:tlen+1])
+
+def dnsParseNS(data, base):
+	rdata = DNSRData()
+	(rest, rdata.nsdname) = dnsParseLabel(data, base)
+	if DEBUG_DNSCLIENT:
+		print "NS DNAME = \"%s\"." % (rdata.nsdname)
+	return rdata
+
+def dnsParseCNAME(data, base):
+	rdata = DNSRData()
+	(rest, rdata.cname) = dnsParseLabel(data, base)
+	if DEBUG_DNSCLIENT:
+		print "CNAME = \"%s\"." % (rdata.cname)
+	return rdata
+
+def dnsParseSOA(data, base):
+	rdata = DNSRData()
+	format = "!IIIII"
+
+	(rest, rdata.mname) = dnsParseLabel(data, base)
+	if rdata.mname is None:
+		return None
+	(rest, rdata.rname) = dnsParseLabel(rest, base)
+	if rdata.rname is None:
+		return None
+	if len(rest) < struct.calcsize(format):
+		return None
+
+	(rdata.serial, rdata.refresh, rdata.retry, rdata.expire,
+		rdata.minimum) = struct.unpack(format, rest[:struct.calcsize(format)])
+
+	if DEBUG_DNSCLIENT:
+		print "SOA(mname) = \"%s\"." % rdata.mname
+		print "SOA(rname) = \"%s\"." % rdata.rname
+		print "SOA(serial) = %d." % rdata.serial
+		print "SOA(refresh) = %d." % rdata.refresh
+		print "SOA(retry) = %d." % rdata.retry
+		print "SOA(expire) = %d." % rdata.expire
+		print "SOA(minimum) = %d." % rdata.minimum
+	return rdata
+
+def dnsParseNULL(data, base):
+	# um, yeah
+	return None
+
+def dnsParseWKS(data, base):
+	return None
+
+def dnsParseHINFO(data, base):
+	rdata = DNSRData()
+	(rest, rdata.cpu) = dnsParseText(data)
+	if rest:
+		(rest, rdata.os) = dnsParseText(rest)
+	if DEBUG_DNSCLIENT:
+		print "HINFO(cpu) = \"%s\"." % rdata.cpu
+		print "HINFO(os) = \"%s\"." % rdata.os
+	return rdata
+
+def dnsParseMX(data, base):
+	rdata = DNSRData()
+	if len(data) < 2:
+		return None
+	rdata.preference = (ord(data[0]) << 8) | ord(data[1])
+	(rest, rdata.exchange) = dnsParseLabel(data[2:], base)
+	if DEBUG_DNSCLIENT:
+		print "MX(exchanger) = \"%s\"." % rdata.exchange
+		print "MX(preference) = %d." % rdata.preference
+	return rdata
+
+def dnsParseTXT(data, base):
+	rdata = DNSRData()
+	(rest, rdata.data) = dnsParseText(data)
+	if DEBUG_DNSCLIENT:
+		print "TXT = \"%s\"." % rdata.data
+	return rdata
+
+def dnsParsePTR(data, base):
+	rdata = DNSRData()
+	(rest, rdata.ptrdname) = dnsParseLabel(data, base)
+	if DEBUG_DNSCLIENT:
+		print "PTR = \"%s\"." % rdata.ptrdname
+        return rdata
+
+def dnsParseSRV(data, base):
+	rdata = DNSRData()
+	format = "!HHH"
+	flen = struct.calcsize(format)
+	if len(data) < flen:
+		return None
+
+	(rdata.priority, rdata.weight, rdata.port) = struct.unpack(format, data[:flen])
+	(rest, rdata.server) = dnsParseLabel(data[flen:], base)
+	if DEBUG_DNSCLIENT:
+		print "SRV(server) = \"%s\"." % rdata.server
+		print "SRV(weight) = %d." % rdata.weight
+		print "SRV(priority) = %d." % rdata.priority
+		print "SRV(port) = %d." % rdata.port
+	return rdata
+
+def dnsParseResults(results):
+	try:
+		header = unpackQueryHeader(results)
+	except struct.error:
+		return []
+
+	if header.dns_qr != 1: # should be a response
+		return []
+
+	if header.dns_rcode != 0: # should be no error
+		return []
+
+	rest = results[header.size():]
+
+	rrlist = []
+
+	for i in xrange(header.dns_qdcount):
+		if not rest:
+			return []
+
+		qq = DNSResult()
+
+		(rest, label) = dnsParseLabel(rest, results)
+		if label is None:
+			return []
+
+		if len(rest) < qq.qsize():
+			return []
+
+		qq.qunpack(rest)
+
+		rest = rest[qq.qsize():]
+
+		if DEBUG_DNSCLIENT:
+			print "Queried for '%s', class = %d, type = %d." % (label,
+				qq.dns_class, qq.dns_type)
+
+	for (rec_count, section_id) in ((header.dns_ancount, DNS_S_ANSWER),
+									(header.dns_nscount, DNS_S_AUTHORITY),
+									(header.dns_arcount, DNS_S_ADDITIONAL)):
+		for i in xrange(rec_count):
+			(rest, label) = dnsParseLabel(rest, results)
+			if label is None:
+				return []
+
+			rr = DNSResult()
+
+			rr.dns_name = label
+			rr.section = section_id
+
+			if len(rest) < rr.size():
+				return []
+
+			rr.unpack(rest)
+
+			rest = rest[rr.size():]
+
+			if DEBUG_DNSCLIENT:
+				print "Answer %d for '%s', class = %d, type = %d, ttl = %d." % (i,
+					rr.dns_name, rr.dns_class, rr.dns_type,
+					rr.dns_ttl)
+
+			if len(rest) < rr.dns_rlength:
+				if DEBUG_DNSCLIENT:
+					print "Answer too short."
+				return []
+
+			fmap = { DNS_T_A: dnsParseA, DNS_T_NS: dnsParseNS,
+				DNS_T_CNAME: dnsParseCNAME, DNS_T_SOA: dnsParseSOA,
+				DNS_T_NULL: dnsParseNULL, DNS_T_WKS: dnsParseWKS,
+				DNS_T_PTR: dnsParsePTR, DNS_T_HINFO: dnsParseHINFO,
+				DNS_T_MX: dnsParseMX, DNS_T_TXT: dnsParseTXT,
+				DNS_T_AAAA : dnsParseAAAA, DNS_T_SRV: dnsParseSRV}
+
+			if not rr.dns_type in fmap:
+				if DEBUG_DNSCLIENT:
+					print "Don't know how to parse RR type %d!" %	rr.dns_type
+			else:
+				rr.rdata = fmap[rr.dns_type](rest[:rr.dns_rlength], results)
+
+			rest = rest[rr.dns_rlength:]
+			rrlist += [rr]
+
+	return rrlist
+
+def query(query, qclass, qtype):
+	qdata = dnsFormatQuery(query, qclass, qtype)
+	if not qdata:
+		return []
+	answer = acutil.res_send(qdata)
+	if not answer:
+		return []
+	return dnsParseResults(answer)
+
+if __name__ == '__main__':
+	DEBUG_DNSCLIENT = True
+	print "Sending query."
+	rr = query(len(sys.argv) > 1 and sys.argv[1] or "devserv.devel.redhat.com.",
+		DNS_C_IN, DNS_T_ANY)
+	sys.exit(0)
diff --git a/ipapython/ipautil.py b/ipapython/ipautil.py
index 3ba57e3a857292c33b866bd4afecaba169473ec2..e3b724a1af490b5763f9a01a8e9fbff7273dbd97 100644
--- a/ipapython/ipautil.py
+++ b/ipapython/ipautil.py
@@ -43,11 +43,9 @@ import datetime
 import netaddr
 import time
 import krbV
-from dns import resolver, rdatatype
-from dns.exception import DNSException
 
 from ipapython.ipa_log_manager import *
-from ipapython import ipavalidate
+from ipapython import ipavalidate, dnsclient
 from ipapython import config
 from ipapython.dn import DN
 
@@ -795,12 +793,11 @@ def bind_port_responder(port, socket_type=socket.SOCK_STREAM, socket_timeout=Non
         raise last_socket_error # pylint: disable=E0702
 
 def is_host_resolvable(fqdn):
-    for rdtype in (rdatatype.A, rdatatype.AAAA):
-        try:
-            resolver.query(fqdn, rdtype)
-        except DNSException:
-            continue
-        else:
+    if not fqdn.endswith('.'):
+        fqdn = fqdn + '.'
+    for rdtype in (dnsclient.DNS_T_A, dnsclient.DNS_T_AAAA):
+        rs = dnsclient.query(fqdn, dnsclient.DNS_C_IN, rdtype)
+        if len([ rec for rec in rs if rec.dns_type is not dnsclient.DNS_T_SOA ]) > 0:
             return True
 
     return False
diff --git a/ipaserver/install/installutils.py b/ipaserver/install/installutils.py
index 754d5fc98f3122cc82064c039236f5916eabf469..62fcb90dc20d9a90ddaf8f77487eadae5c2e38af 100644
--- a/ipaserver/install/installutils.py
+++ b/ipaserver/install/installutils.py
@@ -34,11 +34,9 @@ from ConfigParser import SafeConfigParser, NoOptionError
 import traceback
 import textwrap
 
-from dns import resolver, rdatatype
-from dns.exception import DNSException
 import ldap
 
-from ipapython import ipautil, sysrestore, admintool
+from ipapython import ipautil, sysrestore, admintool, dnsclient
 from ipapython.admintool import ScriptError
 from ipapython.ipa_log_manager import *
 from ipalib.util import validate_hostname
@@ -145,12 +143,14 @@ def verify_fqdn(host_name, no_host_dns=False, local_hostname=True):
         raise HostForwardLookupError("Unable to resolve host name, check /etc/hosts or DNS name resolution")
 
     # Verify this is NOT a CNAME
-    try:
-        root_logger.debug('Check if %s is not a CNAME', host_name)
-        resolver.query(host_name, rdatatype.CNAME)
-        raise HostReverseLookupError("The IPA Server Hostname cannot be a CNAME, only A and AAAA names are allowed.")
-    except DNSException:
-        pass
+    cname_hostname = host_name
+    if not cname_hostname.endswith('.'):
+        cname_hostname += '.'
+    root_logger.debug('Check if %s is not a CNAME', cname_hostname)
+    rs = dnsclient.query(cname_hostname, dnsclient.DNS_C_IN, dnsclient.DNS_T_CNAME)
+    for rsn in rs:
+        if rsn.dns_type == dnsclient.DNS_T_CNAME:
+            raise HostReverseLookupError("The IPA Server Hostname cannot be a CNAME, only A and AAAA names are allowed.")
 
     # list of verified addresses to prevent multiple searches for the same address
     verified = set()
-- 
2.7.4

