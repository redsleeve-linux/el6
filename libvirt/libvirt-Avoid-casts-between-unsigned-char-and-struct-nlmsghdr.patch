diff -Naur ../../libvirt-0.10.2.org/src/util/virnetdev.c ./util/virnetdev.c
--- ../../libvirt-0.10.2.org/src/util/virnetdev.c	2016-11-09 21:52:03.351670650 +0000
+++ src/util/virnetdev.c	2016-11-09 21:26:56.821229744 +0000
@@ -1254,8 +1254,6 @@
  * @ifindex: The interface index; may be < 0 if ifname is given
  * @nlattr: pointer to a pointer of netlink attributes that will contain
  *          the results
- * @recvbuf: Pointer to the buffer holding the returned netlink response
- *           message; free it, once not needed anymore
  * @src_pid: pid used for nl_pid of the local end of the netlink message
  *           (0 == "use getpid()")
  * @dst_pid: pid of destination nl_pid if the kernel
@@ -1269,11 +1267,10 @@
 int
 virNetDevLinkDump(const char *ifname, int ifindex,
                   struct nlattr **tb,
-                  unsigned char **recvbuf,
                   uint32_t src_pid, uint32_t dst_pid)
 {
     int rc = -1;
-    struct nlmsghdr *resp;
+    struct nlmsghdr *resp = NULL;
     struct nlmsgerr *err;
     struct ifinfomsg ifinfo = {
         .ifi_family = AF_UNSPEC,
@@ -1284,8 +1281,6 @@
     unsigned int recvbuflen;
     struct nl_msg *nl_msg;
 
-    *recvbuf = NULL;
-
     if (ifname && ifindex <= 0 && virNetDevGetIndex(ifname, &ifindex) < 0)
         return -1;
 
@@ -1316,15 +1311,13 @@
         goto buffer_too_small;
     }
 
-    if (virNetlinkCommand(nl_msg, recvbuf, &recvbuflen,
+    if (virNetlinkCommand(nl_msg, &resp, &recvbuflen,
                           src_pid, dst_pid, NETLINK_ROUTE, 0) < 0)
         goto cleanup;
 
-    if (recvbuflen < NLMSG_LENGTH(0) || *recvbuf == NULL)
+    if (recvbuflen < NLMSG_LENGTH(0) || resp == NULL)
         goto malformed_resp;
 
-    resp = (struct nlmsghdr *)*recvbuf;
-
     switch (resp->nlmsg_type) {
     case NLMSG_ERROR:
         err = (struct nlmsgerr *)NLMSG_DATA(resp);
@@ -1333,7 +1333,6 @@
              * retry with no IFLA_EXT_MASK attribute at all (signaled
              * by setting ifla_ext_mask_attr = 0).
              */
-            VIR_FREE(*recvbuf);
             nlmsg_free(nl_msg);
             ifla_ext_mask_attr = (ifla_ext_mask_attr == VIR_IFLA_EXT_MASK_UPSTREAM
                                   ? VIR_IFLA_EXT_MASK_RHEL64 : 0);
@@ -1367,9 +1360,8 @@
     }
     rc = 0;
 cleanup:
-    if (rc < 0)
-        VIR_FREE(*recvbuf);
     nlmsg_free(nl_msg);
+    VIR_FREE(resp);
     return rc;
 
 malformed_resp:
@@ -1389,9 +1381,8 @@
                      int vlanid, uint32_t (*getPidFunc)(void))
 {
     int rc = -1;
-    struct nlmsghdr *resp;
+    struct nlmsghdr *resp = NULL;
     struct nlmsgerr *err;
-    unsigned char *recvbuf = NULL;
     unsigned int recvbuflen = 0;
     uint32_t pid = 0;
     struct nl_msg *nl_msg;
@@ -1460,15 +1451,13 @@
         }
     }
 
-    if (virNetlinkCommand(nl_msg, &recvbuf, &recvbuflen, 0, pid,
+    if (virNetlinkCommand(nl_msg, &resp, &recvbuflen, 0, pid,
                           NETLINK_ROUTE, 0) < 0)
         goto cleanup;
 
-    if (recvbuflen < NLMSG_LENGTH(0) || recvbuf == NULL)
+    if (recvbuflen < NLMSG_LENGTH(0) || resp == NULL)
         goto malformed_resp;
 
-    resp = (struct nlmsghdr *)recvbuf;
-
     switch (resp->nlmsg_type) {
     case NLMSG_ERROR:
         err = (struct nlmsgerr *)NLMSG_DATA(resp);
@@ -1501,7 +1490,7 @@
     rc = 0;
 cleanup:
     nlmsg_free(nl_msg);
-    VIR_FREE(recvbuf);
+    VIR_FREE(resp);
     return rc;
 
 malformed_resp:
@@ -1576,18 +1565,15 @@
                      int *vlanid)
 {
     int rc = -1;
-    unsigned char *recvbuf = NULL;
     struct nlattr *tb[IFLA_MAX + 1] = {NULL, };
     int ifindex = -1;
 
-    rc = virNetDevLinkDump(ifname, ifindex, tb, &recvbuf, 0, 0);
+    rc = virNetDevLinkDump(ifname, ifindex, tb, 0, 0);
     if (rc < 0)
         return rc;
 
     rc = virNetDevParseVfConfig(tb, vf, mac, vlanid);
 
-    VIR_FREE(recvbuf);
-
     return rc;
 }
 
@@ -1791,7 +1777,6 @@
 virNetDevLinkDump(const char *ifname ATTRIBUTE_UNUSED,
                   int ifindex ATTRIBUTE_UNUSED,
                   struct nlattr **tb ATTRIBUTE_UNUSED,
-                  unsigned char **recvbuf ATTRIBUTE_UNUSED,
                   uint32_t src_pid ATTRIBUTE_UNUSED,
                   uint32_t dst_pid ATTRIBUTE_UNUSED)
 {
diff -Naur ../../libvirt-0.10.2.org/src/util/virnetdev.h ./util/virnetdev.h
--- ../../libvirt-0.10.2.org/src/util/virnetdev.h	2016-11-09 21:51:55.031668727 +0000
+++ src/util/virnetdev.h	2016-11-09 21:27:40.421249887 +0000
@@ -110,7 +110,6 @@
 
 int virNetDevLinkDump(const char *ifname, int ifindex,
                       struct nlattr **tb,
-                      unsigned char **recvbuf,
                       uint32_t src_pid, uint32_t dst_pid)
     ATTRIBUTE_RETURN_CHECK;
 
diff -Naur ../../libvirt-0.10.2.org/src/util/virnetdevmacvlan.c ./util/virnetdevmacvlan.c
--- ../../libvirt-0.10.2.org/src/util/virnetdevmacvlan.c	2016-11-09 21:52:05.601671170 +0000
+++ src/util/virnetdevmacvlan.c	2016-11-09 21:35:15.191443080 +0000
@@ -327,11 +327,10 @@
                        int *retry)
 {
     int rc = -1;
-    struct nlmsghdr *resp;
+    struct nlmsghdr *resp = NULL;
     struct nlmsgerr *err;
     struct ifinfomsg ifinfo = { .ifi_family = AF_UNSPEC };
     int ifindex;
-    unsigned char *recvbuf = NULL;
     unsigned int recvbuflen;
     struct nl_msg *nl_msg;
     struct nlattr *linkinfo, *info_data;
@@ -381,16 +380,14 @@
 
     nla_nest_end(nl_msg, linkinfo);
 
-    if (virNetlinkCommand(nl_msg, &recvbuf, &recvbuflen, 0, 0,
+    if (virNetlinkCommand(nl_msg, &resp, &recvbuflen, 0, 0,
                           NETLINK_ROUTE, 0) < 0) {
         goto cleanup;
     }
 
-    if (recvbuflen < NLMSG_LENGTH(0) || recvbuf == NULL)
+    if (recvbuflen < NLMSG_LENGTH(0) || resp == NULL)
         goto malformed_resp;
 
-    resp = (struct nlmsghdr *)recvbuf;
-
     switch (resp->nlmsg_type) {
     case NLMSG_ERROR:
         err = (struct nlmsgerr *)NLMSG_DATA(resp);
@@ -425,7 +422,7 @@
     rc = 0;
 cleanup:
     nlmsg_free(nl_msg);
-    VIR_FREE(recvbuf);
+    VIR_FREE(resp);
     return rc;
 
 malformed_resp:
@@ -451,10 +448,9 @@
 int virNetDevMacVLanDelete(const char *ifname)
 {
     int rc = -1;
-    struct nlmsghdr *resp;
+    struct nlmsghdr *resp = NULL;
     struct nlmsgerr *err;
     struct ifinfomsg ifinfo = { .ifi_family = AF_UNSPEC };
-    unsigned char *recvbuf = NULL;
     unsigned int recvbuflen;
     struct nl_msg *nl_msg;
 
@@ -471,16 +467,14 @@
     if (nla_put(nl_msg, IFLA_IFNAME, strlen(ifname)+1, ifname) < 0)
         goto buffer_too_small;
 
-    if (virNetlinkCommand(nl_msg, &recvbuf, &recvbuflen, 0, 0,
+    if (virNetlinkCommand(nl_msg, &resp, &recvbuflen, 0, 0,
                           NETLINK_ROUTE, 0) < 0) {
         goto cleanup;
     }
 
-    if (recvbuflen < NLMSG_LENGTH(0) || recvbuf == NULL)
+    if (recvbuflen < NLMSG_LENGTH(0) || resp == NULL)
         goto malformed_resp;
 
-    resp = (struct nlmsghdr *)recvbuf;
-
     switch (resp->nlmsg_type) {
     case NLMSG_ERROR:
         err = (struct nlmsgerr *)NLMSG_DATA(resp);
@@ -505,7 +499,7 @@
     rc = 0;
 cleanup:
     nlmsg_free(nl_msg);
-    VIR_FREE(recvbuf);
+    VIR_FREE(resp);
     return rc;
 
 malformed_resp:
@@ -696,7 +690,7 @@
 /**
  * virNetDevMacVLanVPortProfileCallback:
  *
- * @msg: The buffer containing the received netlink message
+ * @hdr: The buffer containing the received netlink header + payload
  * @length: The length of the received netlink message.
  * @peer: The netling sockaddr containing the peer information
  * @handled: Contains information if the message has been replied to yet
@@ -708,8 +702,8 @@
  */
 
 static void
-virNetDevMacVLanVPortProfileCallback(unsigned char *msg,
-                                     int length,
+virNetDevMacVLanVPortProfileCallback(struct nlmsghdr *hdr,
+                                     unsigned int length,
                                      struct sockaddr_nl *peer,
                                      bool *handled,
                                      void *opaque)
@@ -729,7 +723,6 @@
         *tb_vfinfo[IFLA_VF_MAX + 1], *tb_vfinfo_list;
 
     struct ifinfomsg ifinfo;
-    struct nlmsghdr *hdr;
     void *data;
     int rem;
     char *ifname;
@@ -738,7 +731,6 @@
     pid_t lldpad_pid = 0;
     pid_t virip_pid = 0;
 
-    hdr = (struct nlmsghdr *) msg;
     data = nlmsg_data(hdr);
 
     /* Quickly decide if we want this or not */
diff -Naur ../../libvirt-0.10.2.org/src/util/virnetdevvportprofile.c ./util/virnetdevvportprofile.c
--- ../../libvirt-0.10.2.org/src/util/virnetdevvportprofile.c	2016-11-09 21:52:03.131670599 +0000
+++ src/util/virnetdevvportprofile.c	2016-11-09 21:39:52.711504580 +0000
@@ -628,13 +628,12 @@
                                uint8_t op)
 {
     int rc = -1;
-    struct nlmsghdr *resp;
+    struct nlmsghdr *resp = NULL;
     struct nlmsgerr *err;
     struct ifinfomsg ifinfo = {
         .ifi_family = AF_UNSPEC,
         .ifi_index  = ifindex,
     };
-    unsigned char *recvbuf = NULL;
     unsigned int recvbuflen = 0;
     int src_pid = 0;
     uint32_t dst_pid = 0;
@@ -785,15 +784,13 @@
             goto cleanup;
     }
 
-    if (virNetlinkCommand(nl_msg, &recvbuf, &recvbuflen,
+    if (virNetlinkCommand(nl_msg, &resp, &recvbuflen,
                           src_pid, dst_pid, NETLINK_ROUTE, 0) < 0)
         goto cleanup;
 
-    if (recvbuflen < NLMSG_LENGTH(0) || recvbuf == NULL)
+    if (recvbuflen < NLMSG_LENGTH(0) || resp == NULL)
         goto malformed_resp;
 
-    resp = (struct nlmsghdr *)recvbuf;
-
     switch (resp->nlmsg_type) {
     case NLMSG_ERROR:
         err = (struct nlmsgerr *)NLMSG_DATA(resp);
@@ -818,7 +815,7 @@
     rc = 0;
 cleanup:
     nlmsg_free(nl_msg);
-    VIR_FREE(recvbuf);
+    VIR_FREE(resp);
     return rc;
 
 malformed_resp:
@@ -858,7 +855,6 @@
 {
     int rc;
     struct nlattr *tb[IFLA_MAX + 1] = { NULL, };
-    unsigned char *recvbuf = NULL;
     bool end = false;
     unsigned int i = 0;
 
@@ -868,7 +864,7 @@
         return -1;
 
     while (!end && i <= nthParent) {
-        rc = virNetDevLinkDump(ifname, ifindex, tb, &recvbuf, 0, 0);
+        rc = virNetDevLinkDump(ifname, ifindex, tb, 0, 0);
         if (rc < 0)
             break;
 
@@ -877,7 +873,6 @@
                            IFNAMSIZ)) {
                 virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
                                _("buffer for root interface name is too small"));
-                VIR_FREE(recvbuf);
                 return -1;
             }
             *parent_ifindex = ifindex;
@@ -889,8 +884,6 @@
         } else
             end = true;
 
-        VIR_FREE(recvbuf);
-
         i++;
     }
 
@@ -917,7 +910,6 @@
     int rc;
     int src_pid = 0;
     uint32_t dst_pid = 0;
-    unsigned char *recvbuf = NULL;
     struct nlattr *tb[IFLA_MAX + 1] = { NULL , };
     int repeats = STATUS_POLL_TIMEOUT_USEC / STATUS_POLL_INTERVL_USEC;
     uint16_t status = 0;
@@ -950,7 +942,7 @@
     }
 
     while (--repeats >= 0) {
-        rc = virNetDevLinkDump(NULL, ifindex, tb, &recvbuf, src_pid, dst_pid);
+        rc = virNetDevLinkDump(NULL, ifindex, tb, src_pid, dst_pid);
         if (rc < 0)
             goto cleanup;
 
@@ -973,8 +965,6 @@
         }
 
         usleep(STATUS_POLL_INTERVL_USEC);
-
-        VIR_FREE(recvbuf);
     }
 
     if (status == PORT_PROFILE_RESPONSE_INPROGRESS) {
@@ -984,7 +974,6 @@
     }
 
 cleanup:
-    VIR_FREE(recvbuf);
 
     return rc;
 }
diff -Naur ../../libvirt-0.10.2.org/src/util/virnetlink.c ./util/virnetlink.c
--- ../../libvirt-0.10.2.org/src/util/virnetlink.c	2016-11-09 21:52:02.011670340 +0000
+++ src/util/virnetlink.c	2016-11-09 21:44:11.461562733 +0000
@@ -227,7 +227,7 @@
  * buffer will be returned.
  */
 int virNetlinkCommand(struct nl_msg *nl_msg,
-                      unsigned char **respbuf, unsigned int *respbuflen,
+                      struct nlmsghdr **resp, unsigned int *respbuflen,
                       uint32_t src_pid, uint32_t dst_pid,
                       unsigned int protocol, unsigned int groups)
 {
@@ -298,7 +298,8 @@
         goto error;
     }
 
-    *respbuflen = nl_recv(nlhandle, &nladdr, respbuf, NULL);
+    *respbuflen = nl_recv(nlhandle, &nladdr,
+                          (unsigned char **)resp, NULL);
     if (*respbuflen <= 0) {
         virReportSystemError(errno,
                              "%s", _("nl_recv failed"));
@@ -306,8 +307,8 @@
     }
 error:
     if (rc == -1) {
-        VIR_FREE(*respbuf);
-        *respbuf = NULL;
+        VIR_FREE(*resp);
+        *resp = NULL;
         *respbuflen = 0;
     }
 
@@ -365,13 +366,14 @@
                         void *opaque)
 {
     virNetlinkEventSrvPrivatePtr srv = opaque;
-    unsigned char *msg;
+    struct nlmsghdr *msg;
     struct sockaddr_nl peer;
     struct ucred *creds = NULL;
     int i, length;
     bool handled = false;
 
-    length = nl_recv(srv->netlinknh, &peer, &msg, &creds);
+    length = nl_recv(srv->netlinknh, &peer,
+                     (unsigned char **)&msg, &creds);
 
     if (length == 0)
         return;
diff -Naur ../../libvirt-0.10.2.org/src/util/virnetlink.h ./util/virnetlink.h
--- ../../libvirt-0.10.2.org/src/util/virnetlink.h	2012-09-21 02:02:13.000000000 +0000
+++ src/util/virnetlink.h	2016-11-09 21:46:12.391590166 +0000
@@ -41,6 +41,7 @@
 struct nl_msg;
 struct sockaddr_nl;
 struct nlattr;
+struct nlmsghdr;
 
 # endif /* __linux__ */
 
@@ -48,11 +49,15 @@
 void virNetlinkShutdown(void);
 
 int virNetlinkCommand(struct nl_msg *nl_msg,
-                      unsigned char **respbuf, unsigned int *respbuflen,
+                      struct nlmsghdr **resp, unsigned int *respbuflen,
                       uint32_t src_pid, uint32_t dst_pid,
                       unsigned int protocol, unsigned int groups);
 
-typedef void (*virNetlinkEventHandleCallback)(unsigned char *msg, int length, struct sockaddr_nl *peer, bool *handled, void *opaque);
+typedef void (*virNetlinkEventHandleCallback)(struct nlmsghdr *,
+                                              unsigned int length,
+                                              struct sockaddr_nl *peer,
+                                              bool *handled,
+                                              void *opaque);
 
 typedef void (*virNetlinkEventRemoveCallback)(int watch, const virMacAddrPtr macaddr, void *opaque);
 
