--- util-linux-ng-2.17.2/sys-utils/nsenter.c.org	2016-09-29 20:25:52.305214756 +0000
+++ util-linux-ng-2.17.2/sys-utils/nsenter.c	2016-09-29 20:45:17.232287065 +0000
@@ -151,6 +151,49 @@
 	exit(EXIT_FAILURE);
 }
 
+#ifdef __linux__
+/*
+ * Workaround older glibc. While kernel may support the setns
+ * syscall, the glibc wrapper might not exist. If that's the
+ * case, use our own.
+ */
+# ifndef __NR_setns
+#  if defined(__x86_64__)
+#   define __NR_setns 308
+#  elif defined(__i386__)
+#   define __NR_setns 346
+#  elif defined(__arm__)
+#   define __NR_setns 375
+#  elif defined(__aarch64__)
+#   define __NR_setns 375
+#  elif defined(__powerpc__)
+#   define __NR_setns 350
+#  elif defined(__s390__)
+#   define __NR_setns 339
+#  endif
+# endif
+
+# ifndef HAVE_SETNS
+#  if defined(__NR_setns)
+#   include <sys/syscall.h>
+
+static inline int setns(int fd, int nstype)
+{
+    return syscall(__NR_setns, fd, nstype);
+}
+#  else /* !__NR_setns */
+#   error Please determine the syscall number for setns on your architecture
+#  endif
+# endif
+#else /* !__linux__ */
+static inline int setns(int fd ATTRIBUTE_UNUSED, int nstype ATTRIBUTE_UNUSED)
+{
+    err(EXIT_FAILURE,
+                         _("Namespaces are not supported on this platform."));
+    return -1;
+}
+#endif
+
 int main(int argc, char *argv[])
 {
 	static const struct option longopts[] = {
